// (page_407)exercise_2.cpp : Defines the entry point for the console application.
/*Вспомните пример STRCONV из главы 8. Класс String в этом примере имеет дефект: у него нет защиты на тот случай, если его объекты будут инициа-
лизированы слишком длинной строкой (константа SZ имеет значение 80).Например, определение String s = "Эта строка имеет очень большую длину и мы можем быть уверены, что она не
уместится в отведенный буфер, что приведет к непредсказуемым последствиям.";будет причиной переполнения массива str строкой s с непредсказуемыми
последствиями вплоть до краха системы.
Создадим класс Pstring, производный от класса String, в котором  предотвратим возможность переполнения буфера при определении слишком
длинной строковой константы. Новый конструктор производного класса будет копировать в str только SZ-1 символов, если строка окажется слиш-
ком длинной, и будет копировать строку полностью, если она будет иметь длину меньшую, чем SZ. Напишите функцию main() программы для про-
верки ее работы со строками разной длины.
*/

#include "stdafx.h"
#include <iostream>
#include <string.h>	// для функций str*

///////////////////////////////////////////////////////////
class String
{
protected:
	enum { SZ = 80 };        // размер массива
	char str[SZ];            // массив для хранения строки
public:
	// конструктор без параметров
	String()
	{
		str[0] = '\x0';
	}
	// конструктор с одним параметром
	String(char s[])
	{
		strcpy_s(str, s);
	}    // сохраняем строку в массиве
		 // показ строки
	void display() const
	{
		std::cout << str;
	}
	// перевод строки к обычному типу
	operator char*()
	{
		return str;
	}
};
///////////////////////////////////////////////////////////
class Pstring :public String { //public для получения доступа к методу display()
public:
	Pstring() : String() {}
	Pstring(char c[]) : String() {
		if (strlen(c) < SZ)
			strcpy_s(str, c);
		else
			strncpy_s(str, c, SZ-1);
	} 
	//если больше 80 копируем только 80 символов
	//если меньше капируем все
};
///////////////////////////////////////////////////////////
int main()
{
	setlocale(LC_ALL, "");
	Pstring s1;                 // используем конструктор без параметров
	char xstr[] = "Эта строка имеет очень большую длину и мы можем быть уверены, что она не уместится в отведенный буфер, что приведет к непредсказуемым последствиям."; // создаем обычную строку

	s1 = xstr;                 // неявно используем конструктор с одним параметром
	s1.display();              // показываем строку
	String s2 = "Мы победим!"; // снова используем конструктор с параметром

	std::cout << static_cast<char*>(s2);  // используем оператор перевода типа
	std::cout << std::endl;

	system("pause");
	return 0;
}


